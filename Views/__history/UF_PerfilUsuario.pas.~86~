unit UF_PerfilUsuario;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Graphics, FMX.Controls, FMX.Forms, FMX.Dialogs, FMX.StdCtrls,
  UF_BaseMenu, FMX.Controls.Presentation, FMX.Objects, FMX.Layouts, FMX.Edit,
  FMX.DateTimeCtrls, FMX.MediaLibrary.Actions, System.Actions, FMX.ActnList,
  FMX.StdActns, Controller.Usuario, System.Permissions, FMX.MediaLibrary,
  FMX.Media;

type
  TF_PerfilUsuario = class(TF_BaseMenu)
    lblNomeUsuario: TLabel;
    lblInformacoesPessoais: TLabel;
    LayoutNome: TLayout;
    Label2: TLabel;
    recNome: TRectangle;
    edtNome: TEdit;
    LayoutEmail: TLayout;
    Label1: TLabel;
    Rectangle1: TRectangle;
    edtEmail: TEdit;
    LayoutDataContato: TLayout;
    Label3: TLabel;
    LayoutDataNascimento: TLayout;
    Rectangle2: TRectangle;
    LayoutContato: TLayout;
    Label4: TLabel;
    Rectangle3: TRectangle;
    EditContato: TEdit;
    DateEditdataNascimento: TDateEdit;
    LayoutSalvar: TLayout;
    recSalvar: TRectangle;
    Label5: TLabel;
    Layout1: TLayout;
    imageCancelar: TImage;
    ImageEditar: TImage;
    circle_foto: TCircle;
    ActionList1: TActionList;
    TakePhotoFromCameraAction1: TTakePhotoFromCameraAction;
    procedure FormResize(Sender: TObject);
    procedure ImageEditarClick(Sender: TObject);
    procedure imageCancelarClick(Sender: TObject);
    procedure recSalvarClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure circle_fotoClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure TakePhotoFromCameraAction1DidFinishTaking(Image: TBitmap);
  private
    { Private declarations }
    PermissaoCamera, PermissaoReadStorage, PermissaoWriteStorage : string;
    FControllerUsuario: ControllerUsuario;

    procedure AoTirarFoto(Image: TBitmap);
    procedure AoTirarFoto2(Sender: TObject; const ATime: TMediaTime);
    procedure ConsultaDadosUsuario;
    procedure MontaTela(DadosUsuario: TObject);
    procedure CalculaMarginRightMenu();
    procedure SetaEnabledComponentes(Enabled: Boolean);

    procedure TakePicturePermissionRequestResult
    (Sender: TObject;
          const APermissions: TClassicStringDynArray;
          const AGrantResults: TClassicPermissionStatusDynArray);
    procedure DisplayMessageCamera(Sender: TObject; const APermissions: TArray<string>;
                  const APostRationaleProc: TProc);

  public
    { Public declarations }
  end;

var
  F_PerfilUsuario: TF_PerfilUsuario;

implementation

uses
  UReadUsuario, funcoes, System.Generics.Collections,
  {$IFDEF ANDROID}
    Androidapi.Helpers, Androidapi.JNI.JavaTypes, Androidapi.JNI.Os,
  {$ENDIF}
  FMX.DialogService;

{$R *.fmx}

{ TF_PerfilUsuario }

procedure TF_PerfilUsuario.DisplayMessageCamera(Sender: TObject; const APermissions: TArray<string>; const APostRationaleProc: TProc);
begin
  // Exibe uma mensagem para justificar a solicitação da permissão
  ShowMessage('Precisamos da permissão para acessar a câmera.');
  // Chama APostRationaleProc para continuar o processo de solicitação de permissão
  APostRationaleProc;
end;

procedure TF_PerfilUsuario.AoTirarFoto2(Sender: TObject; const ATime: TMediaTime);
begin

end;

procedure TF_PerfilUsuario.CalculaMarginRightMenu;
const imageMenuMarginAtual = 310;
const widthRecMenu         = 360;
begin
  imageMenu.Margins.Right := ((imageMenuMarginAtual * recMenu.Width) / widthRecMenu);
end;

procedure TF_PerfilUsuario.circle_fotoClick(Sender: TObject);
begin
  inherited;
  {$IFDEF ANDROID}
    PermissionsService.RequestPermissions(
    [PermissaoCamera, PermissaoWriteStorage, PermissaoReadStorage],
    TakePicturePermissionRequestResult
  );
  {$ENDIF}
end;

procedure TF_PerfilUsuario.ConsultaDadosUsuario;
begin
  FControllerUsuario.OnExecutarAposRecuperarUsuario := MontaTela;
  FControllerUsuario.RecuperarUsuario();
end;

procedure TF_PerfilUsuario.FormActivate(Sender: TObject);
begin
  inherited;
  {$IFDEF ANDROID}
  PermissaoCamera := JStringToString(TJManifest_permission.JavaClass.CAMERA);
  PermissaoReadStorage := JStringToString(TJManifest_permission.JavaClass.READ_EXTERNAL_STORAGE);
  PermissaoWriteStorage := JStringToString(TJManifest_permission.JavaClass.WRITE_EXTERNAL_STORAGE);
  {$ENDIF}
end;

procedure TF_PerfilUsuario.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  FControllerUsuario.Free;
  Action := TCloseAction.caFree;
  F_PerfilUsuario := nil;
end;

procedure TF_PerfilUsuario.FormCreate(Sender: TObject);
begin
  inherited;
  FControllerUsuario := ControllerUsuario.Create;
end;

procedure TF_PerfilUsuario.FormResize(Sender: TObject);
begin
  inherited;
  CalculaMarginRightMenu;
end;

procedure TF_PerfilUsuario.FormShow(Sender: TObject);
begin
  inherited;
  ConsultaDadosUsuario;
end;

procedure TF_PerfilUsuario.imageCancelarClick(Sender: TObject);
begin
  inherited;
  if (LayoutNome.Enabled) then
  begin
    ConsultaDadosUsuario;
    SetaEnabledComponentes(False);
  end;
end;

procedure TF_PerfilUsuario.ImageEditarClick(Sender: TObject);
begin
  inherited;
  SetaEnabledComponentes(True);
end;

procedure TF_PerfilUsuario.MontaTela(DadosUsuario: TObject);
begin
  with TReadUsuariosDto(DadosUsuario) do
  begin
    if FotoBase64 <> '' then
    begin
      circle_foto.Fill.Bitmap.Assign(Base64ToBitmap(FotoBase64));
    end;

    edtNome.Text  := NomeCompleto;
    edtEmail.Text := Email;
    DateEditdataNascimento.Date := DataNascimento;
    EditContato.Text := PhoneNumber;
  end;
end;

procedure TF_PerfilUsuario.recSalvarClick(Sender: TObject);
begin
  inherited;
  SetaEnabledComponentes(False);
end;

procedure TF_PerfilUsuario.SetaEnabledComponentes(Enabled: Boolean);
begin
  if (Enabled) and (LayoutNome.Enabled) then
    Exit;

  LayoutNome.Enabled        := Enabled;
  LayoutEmail.Enabled       := Enabled;
  LayoutDataContato.Enabled := Enabled;
  LayoutSalvar.Enabled      := Enabled;
end;

procedure TF_PerfilUsuario.AoTirarFoto(
  Image: TBitmap);
begin
  showmessage('ao tirar foto');
  circle_foto.Fill.Bitmap.Assign(Image);
end;

procedure TF_PerfilUsuario.TakePhotoFromCameraAction1DidFinishTaking(
  Image: TBitmap);
begin
  inherited;
  showmessage('seu cu preto');
end;

procedure TF_PerfilUsuario.TakePicturePermissionRequestResult
      (Sender: TObject;
        const APermissions: TClassicStringDynArray;
        const AGrantResults: TClassicPermissionStatusDynArray);
var
  Service: IFMXCameraService;
  Params: TParamsPhotoQuery;
  Control: TControl;
begin
  if (Length(AGrantResults) = 3) and
           (AGrantResults[0] = TPermissionStatus.Granted) and
           (AGrantResults[1] = TPermissionStatus.Granted) and
           (AGrantResults[2] = TPermissionStatus.Granted) then
  begin
    try
      Params.Editable := False;
      Params.RequiredResolution := TSize.Create(200, 200);
      Params.OnDidFinishTaking := AoTirarFoto;
      Control := TControl.Create(nil);
    except on ex: Exception do
      begin
        Ex.Message := 'Erro params: ' + ex.Message;
        raise;
      end;
    end;

    try
      TakePhotoFromCameraAction1.Execute;
//      Service.TakePhoto(Control, Params);
    except on ex: Exception do
      begin
        Ex.Message := 'Erro Service: ' + ex.Message;
        raise;
      end;
    end

  end
  else
    TDialogService.ShowMessage('Você não tem permissão para tirar fotos');
end;

end.
