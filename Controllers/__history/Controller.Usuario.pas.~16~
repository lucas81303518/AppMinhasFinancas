unit Controller.Usuario;

interface

uses
  ULoginUsuario, DAO.Usuario, UCreateUsuario;

type
  TExecutarApos = procedure of object;

  ControllerUsuario = class
  private
    FDAOUsuario: TDAOUsuario;
    FExecutarApos: TExecutarApos;
  public
    function Login(DtoLogin: TLoginUsuario): string;
    function Cadastrar(DtoCreate: TCreateUsuario): Boolean;
    constructor Create;
    destructor Destroy;

    property OnExecutarApos: TExecutarApos read FExecutarApos write FExecutarApos;
end;

implementation

uses
  System.Threading, System.SysUtils, System.Classes, ThreadingEx, FMX.Dialogs;

{ ControllerUsuario }

function ControllerUsuario.Cadastrar(DtoCreate: TCreateUsuario): Boolean;
begin
   TTaskEx.Run(
    procedure
    begin
      FDAOUsuario.Cadastrar(DtoCreate);
    end)
    .ContinueWith(
      procedure(const LTaskEx: ITaskEx)
        begin
          TThread.Synchronize(TThread.CurrentThread,
          procedure
          begin
            if LTaskEx.ExceptObj <> nil then
              showmessage(LTaskEx.ExceptObj.ToString)
            else
            if Assigned(OnExecutarApos) then
              OnExecutarApos();
          end);
        end
    , OnlyOnFaulted);
end;

constructor ControllerUsuario.Create;
begin
  inherited;
  FDAOUsuario := TDAOUsuario.Create;
end;

destructor ControllerUsuario.Destroy;
begin
  FDAOUsuario.Destroy;
  inherited;
end;

function ControllerUsuario.Login(DtoLogin: TLoginUsuario): string;
begin
  result := FDAOUsuario.Login(DtoLogin);
end;

end.
